#!/usr/bin/env sh

ask_confirm() {
	echo -n "$1 [y/N] " && read -r action && [ "$action" != "y" ]
	return $?
}

read_wrapper() {
	# echo "Reading $2 bytes from $1 with offset $3" >&2
	dd if="/proc/$CLIENT_PID/mem" status=none bs=1 count=$(($2)) skip=$(($1 - ${3:-0}))
}

write_wrapper() {
	# echo "Writing $3 bytes to $2 with offset $4" >&2
	echo -n "$1" | dd of="/proc/$CLIENT_PID/mem" status=none bs=1 count=$(($3)) seek=$(($2 - ${4:-0})) conv=notrunc
}

show_usage() {
	echo "Usage: $0 <pid>";
	exit 1
}

set_value() {
	if echo "$1" | grep -qE '^[a-zA-Z_0-9]+$'; then
		eval "com_$1=$2"
	else
		echo "ILLEGAL VARIABLE: Must only contain [a-zA-Z_0-9]" >&2
	fi
}

get_value() {
	if echo "$1" | grep -qE '^[a-zA-Z_0-9]+$'; then
		eval "echo \$com_$1"
	else
		echo "ILLEGAL VARIABLE: Must only contain [a-zA-Z_0-9]" >&2
	fi
}

[ $# -ne 1 ] && show_usage
export CLIENT_PID="$1"

trap 'exit' TERM INT

echo -n "PATCH> "
while read cmd var data data2; do
	case $cmd in
		h|help)
			#TODO
			;;
		a|attach)
			CLIENT_PID="$var"
			;;
		m|maps)
			while read -r e_addr e_mode e_ign e_ign e_ign e_name; do
				e_size="$(( 0x$(echo "$e_addr" | cut -d- -f2) - 0x$(echo "$e_addr" | cut -d- -f1) ))"
				e_addr="$(echo "$e_addr" | cut -d- -f1 | tr '[a-z]' '[A-Z]')"
				echo "Address $e_addr; Size $(printf "%08x" $e_size); Mode $e_mode; Name $e_name"
			done <"/proc/$CLIENT_PID/maps"
			;;
		f|find)
			v_mode=""; v_name=""; v_cons="";
			for opt in "$data" "$data2"; do
				case $opt in
					m-*) v_mode="$(echo "$opt" | cut -d- -f2-)" ;;
					n-*) v_name="$(echo "$opt" | cut -d- -f2-)" ;;
				esac
			done
			while read -r e_addr e_mode e_ign e_ign e_ign e_name; do
				e_size="$(( 0x$(echo "$e_addr" | cut -d- -f2) - 0x$(echo "$e_addr" | cut -d- -f1) ))"
				e_addr="$(echo "$e_addr" | cut -d- -f1 | tr '[a-z]' '[A-Z]')"
				[ -n "$v_name" -a "$v_name" != "$e_name" ] && continue
				[ -n "$v_mode" -a "$v_mode" != "$e_mode" ] && continue
				echo "Address $e_addr; Size $(printf "%08x" $e_size); Mode $e_mode; Name $e_name"
				[ "$e_size" -gt "$((0xFFFFFF))" ] && ask_confirm "Long segment found. Do you still want to analyze?" <&3 && continue

				v_cons="${v_cons}$(read_wrapper "0x$e_addr" "$e_size" | grep -abo "$var" | awk -v addr=$e_addr 'BEGIN{FS=":"; print "ibase=16; obase=10;"} { printf "%s+%X\n", addr, $1 }' | bc | tr '\n' ' ')"
			done 3<&0 <"/proc/$CLIENT_PID/maps"
			while true; do
				echo "Have $(echo "$v_cons" | wc -w) candidates: $v_cons"
				echo -n "Enter a value for direct pinpoint, or empty to abort: "
				if ! read -r vat || [ ! -n "$vat" ]; then break; fi
				v_new_cons=""
				for v_con in $v_cons; do
					v_con="$(echo "$v_con" | tr -d '\n ')"
					if read_wrapper "0x$v_con" "${#var}" | grep -q "$var"; then
						v_new_cons="${v_new_cons}$v_con "
					fi
				done
				v_cons=$v_new_cons
			done
			echo "Have $(echo "$v_cons" | wc -w) candidates: $v_cons"
			echo -n "Enter a value for reverse pinpoint, or empty to abort: "
			if read -r var && [ -n "$var" ]; then
				for v_con in $v_cons; do
						v_con="$(echo "$v_con" | tr -d '\n ')"
						read_wrapper "0x$v_con" "${#var}" | xxd
						ask_confirm "Should pinpoint?" && continue
						write_wrapper "$var" "0x$v_con" "${#var}"
						read_wrapper "0x$v_con" "${#var}" | xxd
						ask_confirm "Was pinpoint successful?" && continue
						v_cons="$v_con"
						break;
				done
			fi
			echo "Have $(echo "$v_cons" | wc -w) candidates: $v_cons"
			;;
		l|loop)

			;;
		p|point)
			if ! echo "$data" | grep -qE '^[0-9a-fA-F]+$'; then
				echo "ILLEGAL POINTER: Must only contain [0-9a-fA-F]"
				echo -n "PATCH> "
				continue;
			fi
			set_value "$var" "$data"
			;;
		s|set)
			ptr="$(get_value "$var")"
			if [ -z "$data" ]; then
				echo "ILLEGAL SYNTAX: Must have a DATA value"
				echo -n "PATCH> "
				continue;
			fi
			[ -z "$ptr" ] && echo -n "PATCH> " && continue;
			write_wrapper "$data" "0x$ptr" "${#data}" "$data2"
			;;
		g|get)
			ptr="$(get_value "$var")"
			if [ -z "$data" ]; then
				echo "ILLEGAL SYNTAX: Must have a SIZE value"
				echo -n "PATCH> "
				continue;
			fi
			[ -z "$ptr" ] && echo -n "PATCH> " && continue;
			read_wrapper "0x$ptr" "$data" "$data2" | xxd
			echo
			;;
		*)
			echo "ILLEGAL COMMAND: $cmd isn't a recognized command"
			;;
	esac
	echo -n "PATCH> "
done
